// <auto-generated />
namespace Smart.Reflection
{
    using System;
    using System.Reflection;

    public sealed partial class DynamicDelegateFactory
    {
        public Func<object> CreateFactory0(ConstructorInfo ci)
        {
            return (Func<object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    Type.EmptyTypes));
        }

        public Func<object, object> CreateFactory1(ConstructorInfo ci)
        {
            return (Func<object, object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    new[] { typeof(object), }));
        }

        public Func<object, object, object> CreateFactory2(ConstructorInfo ci)
        {
            return (Func<object, object, object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    new[] { typeof(object), typeof(object), }));
        }

        public Func<object, object, object, object> CreateFactory3(ConstructorInfo ci)
        {
            return (Func<object, object, object, object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    new[] { typeof(object), typeof(object), typeof(object), }));
        }

        public Func<object, object, object, object, object> CreateFactory4(ConstructorInfo ci)
        {
            return (Func<object, object, object, object, object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    new[] { typeof(object), typeof(object), typeof(object), typeof(object), }));
        }

        public Func<object, object, object, object, object, object> CreateFactory5(ConstructorInfo ci)
        {
            return (Func<object, object, object, object, object, object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    new[] { typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), }));
        }

        public Func<object, object, object, object, object, object, object> CreateFactory6(ConstructorInfo ci)
        {
            return (Func<object, object, object, object, object, object, object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    new[] { typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), }));
        }

        public Func<object, object, object, object, object, object, object, object> CreateFactory7(ConstructorInfo ci)
        {
            return (Func<object, object, object, object, object, object, object, object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    new[] { typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), }));
        }

        public Func<object, object, object, object, object, object, object, object, object> CreateFactory8(ConstructorInfo ci)
        {
            return (Func<object, object, object, object, object, object, object, object, object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    new[] { typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), }));
        }

        public Func<object, object, object, object, object, object, object, object, object, object> CreateFactory9(ConstructorInfo ci)
        {
            return (Func<object, object, object, object, object, object, object, object, object, object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    new[] { typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), }));
        }

        public Func<object, object, object, object, object, object, object, object, object, object, object> CreateFactory10(ConstructorInfo ci)
        {
            return (Func<object, object, object, object, object, object, object, object, object, object, object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    new[] { typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), }));
        }

        public Func<object, object, object, object, object, object, object, object, object, object, object, object> CreateFactory11(ConstructorInfo ci)
        {
            return (Func<object, object, object, object, object, object, object, object, object, object, object, object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    new[] { typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), }));
        }

        public Func<object, object, object, object, object, object, object, object, object, object, object, object, object> CreateFactory12(ConstructorInfo ci)
        {
            return (Func<object, object, object, object, object, object, object, object, object, object, object, object, object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    new[] { typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), }));
        }

        public Func<object, object, object, object, object, object, object, object, object, object, object, object, object, object> CreateFactory13(ConstructorInfo ci)
        {
            return (Func<object, object, object, object, object, object, object, object, object, object, object, object, object, object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    new[] { typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), }));
        }

        public Func<object, object, object, object, object, object, object, object, object, object, object, object, object, object, object> CreateFactory14(ConstructorInfo ci)
        {
            return (Func<object, object, object, object, object, object, object, object, object, object, object, object, object, object, object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    new[] { typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), }));
        }

        public Func<object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object> CreateFactory15(ConstructorInfo ci)
        {
            return (Func<object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    new[] { typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), }));
        }

        public Func<object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object> CreateFactory16(ConstructorInfo ci)
        {
            return (Func<object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object>)factoryDelegateCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    typeof(object),
                    new[] { typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), typeof(object), }));
        }

        public Func<TP1, T> CreateFactory<TP1, T>()
        {
            var ci = typeof(T).GetConstructor(new[] { typeof(TP1) });
            if (ci is null)
            {
                throw new ArgumentException("Constructor type parameter is invalid.");
            }

            return (Func<TP1, T>)typedFactoryCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    x.DeclaringType,
                    new[] { typeof(TP1), }));
        }

        public Func<TP1, TP2, T> CreateFactory<TP1, TP2, T>()
        {
            var ci = typeof(T).GetConstructor(new[] { typeof(TP1), typeof(TP2) });
            if (ci is null)
            {
                throw new ArgumentException("Constructor type parameter is invalid.");
            }

            return (Func<TP1, TP2, T>)typedFactoryCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    x.DeclaringType,
                    new[] { typeof(TP1), typeof(TP2), }));
        }

        public Func<TP1, TP2, TP3, T> CreateFactory<TP1, TP2, TP3, T>()
        {
            var ci = typeof(T).GetConstructor(new[] { typeof(TP1), typeof(TP2), typeof(TP3) });
            if (ci is null)
            {
                throw new ArgumentException("Constructor type parameter is invalid.");
            }

            return (Func<TP1, TP2, TP3, T>)typedFactoryCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    x.DeclaringType,
                    new[] { typeof(TP1), typeof(TP2), typeof(TP3), }));
        }

        public Func<TP1, TP2, TP3, TP4, T> CreateFactory<TP1, TP2, TP3, TP4, T>()
        {
            var ci = typeof(T).GetConstructor(new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4) });
            if (ci is null)
            {
                throw new ArgumentException("Constructor type parameter is invalid.");
            }

            return (Func<TP1, TP2, TP3, TP4, T>)typedFactoryCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    x.DeclaringType,
                    new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), }));
        }

        public Func<TP1, TP2, TP3, TP4, TP5, T> CreateFactory<TP1, TP2, TP3, TP4, TP5, T>()
        {
            var ci = typeof(T).GetConstructor(new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5) });
            if (ci is null)
            {
                throw new ArgumentException("Constructor type parameter is invalid.");
            }

            return (Func<TP1, TP2, TP3, TP4, TP5, T>)typedFactoryCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    x.DeclaringType,
                    new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), }));
        }

        public Func<TP1, TP2, TP3, TP4, TP5, TP6, T> CreateFactory<TP1, TP2, TP3, TP4, TP5, TP6, T>()
        {
            var ci = typeof(T).GetConstructor(new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6) });
            if (ci is null)
            {
                throw new ArgumentException("Constructor type parameter is invalid.");
            }

            return (Func<TP1, TP2, TP3, TP4, TP5, TP6, T>)typedFactoryCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    x.DeclaringType,
                    new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), }));
        }

        public Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, T> CreateFactory<TP1, TP2, TP3, TP4, TP5, TP6, TP7, T>()
        {
            var ci = typeof(T).GetConstructor(new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7) });
            if (ci is null)
            {
                throw new ArgumentException("Constructor type parameter is invalid.");
            }

            return (Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, T>)typedFactoryCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    x.DeclaringType,
                    new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), }));
        }

        public Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, T> CreateFactory<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, T>()
        {
            var ci = typeof(T).GetConstructor(new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8) });
            if (ci is null)
            {
                throw new ArgumentException("Constructor type parameter is invalid.");
            }

            return (Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, T>)typedFactoryCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    x.DeclaringType,
                    new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), }));
        }

        public Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, T> CreateFactory<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, T>()
        {
            var ci = typeof(T).GetConstructor(new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), typeof(TP9) });
            if (ci is null)
            {
                throw new ArgumentException("Constructor type parameter is invalid.");
            }

            return (Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, T>)typedFactoryCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    x.DeclaringType,
                    new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), typeof(TP9), }));
        }

        public Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, T> CreateFactory<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, T>()
        {
            var ci = typeof(T).GetConstructor(new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), typeof(TP9), typeof(TP10) });
            if (ci is null)
            {
                throw new ArgumentException("Constructor type parameter is invalid.");
            }

            return (Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, T>)typedFactoryCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    x.DeclaringType,
                    new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), typeof(TP9), typeof(TP10), }));
        }

        public Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, T> CreateFactory<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, T>()
        {
            var ci = typeof(T).GetConstructor(new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), typeof(TP9), typeof(TP10), typeof(TP11) });
            if (ci is null)
            {
                throw new ArgumentException("Constructor type parameter is invalid.");
            }

            return (Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, T>)typedFactoryCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    x.DeclaringType,
                    new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), typeof(TP9), typeof(TP10), typeof(TP11), }));
        }

        public Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, TP12, T> CreateFactory<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, TP12, T>()
        {
            var ci = typeof(T).GetConstructor(new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), typeof(TP9), typeof(TP10), typeof(TP11), typeof(TP12) });
            if (ci is null)
            {
                throw new ArgumentException("Constructor type parameter is invalid.");
            }

            return (Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, TP12, T>)typedFactoryCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    x.DeclaringType,
                    new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), typeof(TP9), typeof(TP10), typeof(TP11), typeof(TP12), }));
        }

        public Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, TP12, TP13, T> CreateFactory<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, TP12, TP13, T>()
        {
            var ci = typeof(T).GetConstructor(new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), typeof(TP9), typeof(TP10), typeof(TP11), typeof(TP12), typeof(TP13) });
            if (ci is null)
            {
                throw new ArgumentException("Constructor type parameter is invalid.");
            }

            return (Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, TP12, TP13, T>)typedFactoryCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    x.DeclaringType,
                    new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), typeof(TP9), typeof(TP10), typeof(TP11), typeof(TP12), typeof(TP13), }));
        }

        public Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, TP12, TP13, TP14, T> CreateFactory<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, TP12, TP13, TP14, T>()
        {
            var ci = typeof(T).GetConstructor(new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), typeof(TP9), typeof(TP10), typeof(TP11), typeof(TP12), typeof(TP13), typeof(TP14) });
            if (ci is null)
            {
                throw new ArgumentException("Constructor type parameter is invalid.");
            }

            return (Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, TP12, TP13, TP14, T>)typedFactoryCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    x.DeclaringType,
                    new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), typeof(TP9), typeof(TP10), typeof(TP11), typeof(TP12), typeof(TP13), typeof(TP14), }));
        }

        public Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, TP12, TP13, TP14, TP15, T> CreateFactory<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, TP12, TP13, TP14, TP15, T>()
        {
            var ci = typeof(T).GetConstructor(new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), typeof(TP9), typeof(TP10), typeof(TP11), typeof(TP12), typeof(TP13), typeof(TP14), typeof(TP15) });
            if (ci is null)
            {
                throw new ArgumentException("Constructor type parameter is invalid.");
            }

            return (Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, TP12, TP13, TP14, TP15, T>)typedFactoryCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    x.DeclaringType,
                    new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), typeof(TP9), typeof(TP10), typeof(TP11), typeof(TP12), typeof(TP13), typeof(TP14), typeof(TP15), }));
        }

        public Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, TP12, TP13, TP14, TP15, TP16, T> CreateFactory<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, TP12, TP13, TP14, TP15, TP16, T>()
        {
            var ci = typeof(T).GetConstructor(new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), typeof(TP9), typeof(TP10), typeof(TP11), typeof(TP12), typeof(TP13), typeof(TP14), typeof(TP15), typeof(TP16) });
            if (ci is null)
            {
                throw new ArgumentException("Constructor type parameter is invalid.");
            }

            return (Func<TP1, TP2, TP3, TP4, TP5, TP6, TP7, TP8, TP9, TP10, TP11, TP12, TP13, TP14, TP15, TP16, T>)typedFactoryCache
                .GetOrAdd(ci, x => CreateFactoryInternal(
                    x,
                    x.DeclaringType,
                    new[] { typeof(TP1), typeof(TP2), typeof(TP3), typeof(TP4), typeof(TP5), typeof(TP6), typeof(TP7), typeof(TP8), typeof(TP9), typeof(TP10), typeof(TP11), typeof(TP12), typeof(TP13), typeof(TP14), typeof(TP15), typeof(TP16), }));
        }

    }
}
